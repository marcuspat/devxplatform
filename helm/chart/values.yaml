# Default values for app
replicaCount: 3

image:
  repository: ghcr.io/your-org/your-app
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Service account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9090"
  prometheus.io/path: "/metrics"

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL

# Service configuration
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  annotations: {}
  selector: ""  # Used for blue-green deployments

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  hosts:
    - host: example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: app-tls
      hosts:
        - example.com

# Resource limits
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

# Autoscaling configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity rules
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - app
          topologyKey: kubernetes.io/hostname

# Health checks
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Startup probe for slow starting containers
startupProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 3
  failureThreshold: 30

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 50%
  # maxUnavailable: 1

# Network Policies
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
        - namespaceSelector:
            matchLabels:
              name: monitoring
  egress:
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53

# Environment variables
env:
  NODE_ENV: production
  LOG_LEVEL: info
  PORT: "8080"

# Secrets (referenced from Kubernetes secrets)
envFrom:
  - secretRef:
      name: app-secrets
  - configMapRef:
      name: app-config

# Volume mounts
volumeMounts:
  - name: tmp
    mountPath: /tmp
  - name: cache
    mountPath: /app/.cache

# Volumes
volumes:
  - name: tmp
    emptyDir: {}
  - name: cache
    emptyDir: {}

# Canary deployment configuration
canary:
  enabled: false
  weight: 10
  # Analysis configuration for Flagger
  analysis:
    interval: 1m
    threshold: 5
    maxWeight: 50
    stepWeight: 10
    metrics:
      - name: request-success-rate
        thresholdRange:
          min: 99
        interval: 1m
      - name: request-duration
        thresholdRange:
          max: 500
        interval: 30s

# Service Mesh configuration (Istio)
serviceMesh:
  enabled: true
  istio:
    virtualService:
      enabled: true
      gateways:
        - istio-system/main-gateway
    destinationRule:
      enabled: true
      trafficPolicy:
        connectionPool:
          tcp:
            maxConnections: 100
          http:
            http1MaxPendingRequests: 100
            http2MaxRequests: 100
        loadBalancer:
          consistentHash:
            httpCookie:
              name: "session-cookie"
              ttl: 3600s

# Monitoring and observability
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /metrics
  dashboards:
    enabled: true
  alerts:
    enabled: true

# Feature flags
featureFlags:
  provider: launchdarkly
  sdkKey: ""  # Set via secret
  environment: production

# Secrets configuration
secrets:
  create: false  # Set to true to create secrets from values
  data: {}
  # Example secrets:
  # data:
  #   DATABASE_URL: "postgresql://user:pass@host:5432/db"
  #   REDIS_URL: "redis://default:pass@redis:6379"
  #   API_KEY: "your-api-key"

# Additional configuration
additionalConfig: {}
# Example additional config:
# additionalConfig:
#   CUSTOM_CONFIG_KEY: "custom-value"

# Database migration
migration:
  enabled: false
  image:
    repository: migrate/migrate
    tag: latest
  command: ["migrate", "-path", "/migrations", "-database", "$(DATABASE_URL)", "up"]

# Redis configuration
redis:
  enabled: false
  architecture: standalone
  auth:
    enabled: true
    existingSecret: redis-secret
    existingSecretPasswordKey: password

# PostgreSQL configuration
postgresql:
  enabled: false
  auth:
    postgresPassword: ""
    username: app
    password: ""
    database: app_db
    existingSecret: postgresql-secret