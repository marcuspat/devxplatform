version: '3.8'

services:
  # Redis broker and result backend
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL for application data (optional)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: celery_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Celery worker
  worker:
    build: .
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/celery_db
      - REDIS_URL=redis://redis:6379/2
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - PROMETHEUS_PORT=9090
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./worker.py:/app/worker.py
    command: >
      celery -A app.celery_app worker
      --loglevel=info
      --concurrency=4
      --queues=default,email,processing,maintenance,monitoring,priority
      --max-tasks-per-child=1000
      --time-limit=3600
      --soft-time-limit=3300
    healthcheck:
      test: ["CMD", "celery", "-A", "app.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Celery Beat scheduler (for periodic tasks)
  beat:
    build: .
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/celery_db
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - beat_schedule:/app/celerybeat-schedule
    command: >
      celery -A app.celery_app beat
      --loglevel=info
      --schedule=/app/celerybeat-schedule
    healthcheck:
      test: ["CMD", "pgrep", "-f", "celery.*beat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flower monitoring (optional)
  flower:
    build: .
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - FLOWER_PORT=5555
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    command: >
      celery -A app.celery_app flower
      --port=5555
      --broker=redis://redis:6379/0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/api/workers"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

volumes:
  redis_data:
  postgres_data:
  beat_schedule:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: celery_network