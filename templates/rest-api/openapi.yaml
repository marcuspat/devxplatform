openapi: 3.0.3
info:
  title: REST API Template
  description: Production-ready REST API template with Express and TypeScript
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.example.com/v1
    description: Production server

tags:
  - name: users
    description: User management operations
  - name: products
    description: Product management operations
  - name: health
    description: Health check endpoints

paths:
  /users:
    get:
      tags:
        - users
      summary: List all users
      operationId: listUsers
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: sort
          in: query
          description: Sort field
          schema:
            type: string
            enum: [createdAt, updatedAt, username, email]
            default: createdAt
        - name: order
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'
    
    post:
      tags:
        - users
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'

  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    
    put:
      tags:
        - users
      summary: Update user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    
    delete:
      tags:
        - users
      summary: Delete user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: User ID
        email:
          type: string
          format: email
          description: User email address
        username:
          type: string
          description: Username
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: Last name
        role:
          type: string
          enum: [user, admin]
          description: User role
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - id
        - email
        - username
        - firstName
        - lastName
        - role
        - createdAt
        - updatedAt
    
    CreateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
        username:
          type: string
          minLength: 3
          maxLength: 30
          pattern: '^[a-zA-Z0-9]+$'
          description: Username
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: First name
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: Last name
        password:
          type: string
          minLength: 8
          maxLength: 100
          description: User password
        role:
          type: string
          enum: [user, admin]
          default: user
          description: User role
      required:
        - email
        - username
        - firstName
        - lastName
        - password
    
    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
        username:
          type: string
          minLength: 3
          maxLength: 30
          pattern: '^[a-zA-Z0-9]+$'
          description: Username
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: First name
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: Last name
        role:
          type: string
          enum: [user, admin]
          description: User role
      minProperties: 1
    
    UserResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/User'
        message:
          type: string
      required:
        - data
    
    UserListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          type: object
          properties:
            page:
              type: integer
              minimum: 1
            limit:
              type: integer
              minimum: 1
              maximum: 100
            total:
              type: integer
              minimum: 0
            totalPages:
              type: integer
              minimum: 0
          required:
            - page
            - limit
            - total
            - totalPages
      required:
        - data
        - pagination
    
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            id:
              type: string
              description: Error ID for tracking
            code:
              type: string
              description: Error code
            message:
              type: string
              description: Error message
            details:
              type: object
              description: Additional error details
          required:
            - code
            - message
      required:
        - error
  
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT