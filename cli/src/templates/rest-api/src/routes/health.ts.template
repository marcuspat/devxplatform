import { Router } from 'express';
import { StatusCodes } from 'http-status-codes';
import { config } from '../config/index.js';
import { asyncHandler } from '../middleware/error.js';
{{#if features.database}}
import { checkDatabaseHealth } from '../services/health.js';
{{/if}}
{{#if features.redis}}
import { checkRedisHealth } from '../services/health.js';
{{/if}}

const router = Router();

// Basic health check
router.get('/', asyncHandler(async (req, res) => {
  const healthCheck = {
    status: 'ok',
    timestamp: new Date().toISOString(),
    service: config.service.name,
    version: config.service.version,
    environment: config.env,
    uptime: process.uptime(),
    memory: {
      used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024 * 100) / 100,
      total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024 * 100) / 100,
    },
  };

  res.status(StatusCodes.OK).json(healthCheck);
}));

// Detailed health check with dependencies
router.get('/detailed', asyncHandler(async (req, res) => {
  const checks: Record<string, any> = {};
  let overallStatus = 'healthy';

  // Check database connection
  {{#if features.database}}
  try {
    const dbHealth = await checkDatabaseHealth();
    checks.database = dbHealth;
    if (dbHealth.status !== 'healthy') {
      overallStatus = 'unhealthy';
    }
  } catch (error) {
    checks.database = {
      status: 'unhealthy',
      error: error instanceof Error ? error.message : 'Unknown error',
    };
    overallStatus = 'unhealthy';
  }
  {{/if}}

  // Check Redis connection
  {{#if features.redis}}
  try {
    const redisHealth = await checkRedisHealth();
    checks.redis = redisHealth;
    if (redisHealth.status !== 'healthy') {
      overallStatus = 'degraded';
    }
  } catch (error) {
    checks.redis = {
      status: 'unhealthy',
      error: error instanceof Error ? error.message : 'Unknown error',
    };
    if (overallStatus === 'healthy') {
      overallStatus = 'degraded';
    }
  }
  {{/if}}

  const healthCheck = {
    status: overallStatus,
    timestamp: new Date().toISOString(),
    service: config.service.name,
    version: config.service.version,
    environment: config.env,
    uptime: process.uptime(),
    memory: {
      used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024 * 100) / 100,
      total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024 * 100) / 100,
      rss: Math.round(process.memoryUsage().rss / 1024 / 1024 * 100) / 100,
      external: Math.round(process.memoryUsage().external / 1024 / 1024 * 100) / 100,
    },
    cpu: {
      usage: process.cpuUsage(),
    },
    checks,
  };

  const statusCode = overallStatus === 'healthy' 
    ? StatusCodes.OK 
    : overallStatus === 'degraded' 
      ? StatusCodes.OK 
      : StatusCodes.SERVICE_UNAVAILABLE;

  res.status(statusCode).json(healthCheck);
}));

// Readiness probe
router.get('/ready', asyncHandler(async (req, res) => {
  // Check if service is ready to accept traffic
  {{#if features.database}}
  try {
    await checkDatabaseHealth();
  } catch (error) {
    return res.status(StatusCodes.SERVICE_UNAVAILABLE).json({
      status: 'not ready',
      reason: 'Database not available',
      timestamp: new Date().toISOString(),
    });
  }
  {{/if}}

  res.status(StatusCodes.OK).json({
    status: 'ready',
    timestamp: new Date().toISOString(),
  });
}));

// Liveness probe
router.get('/live', asyncHandler(async (req, res) => {
  // Simple liveness check - service is running
  res.status(StatusCodes.OK).json({
    status: 'alive',
    timestamp: new Date().toISOString(),
  });
}));

export default router;