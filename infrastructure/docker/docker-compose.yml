services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: devx-postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - devx-network

  # Redis Cache/Queue
  redis:
    image: redis:7-alpine
    container_name: devx-redis
    restart: unless-stopped
    env_file:
      - .env
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - devx-network

  # API Backend Service
  api:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.api
    container_name: devx-api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${API_PORT}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
    ports:
      - "${API_PORT}:${API_PORT}"
    volumes:
      - ../../api:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - devx-network


  # Portal UI (Next.js)
  portal:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.portal
    container_name: devx-portal
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      API_URL: ${API_URL}
    ports:
      - "3002:${PORTAL_PORT}"
    volumes:
      - ../../portal:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORTAL_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - devx-network

  # Worker Service for Background Jobs
  worker:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.worker
    container_name: devx-worker
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY}
      QUEUE_NAME: ${QUEUE_NAME}
      PORT: ${WORKER_PORT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${WORKER_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "${WORKER_PORT}:${WORKER_PORT}"
    volumes:
      - ../../worker:/app
      - /app/node_modules
    networks:
      - devx-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: devx-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT}:80"
      - "3000:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      portal:
        condition: service_healthy
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - devx-network

  # Development Database Admin (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: devx-pgadmin
    restart: unless-stopped
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - devx-network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  worker_data:
    driver: local

networks:
  devx-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16